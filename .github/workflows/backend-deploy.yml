name: Backend Deployment

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - config-server
          - gateway
          - auth-service
          - user-service
          - match-service
          - player-service
          - s3-upload-service
          - elo-service
          - tournament-service

    env:
      AWS_REGION: us-east-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for changes in ${{ matrix.service }}
        id: changes-check
        run: |
          if git diff --quiet HEAD^ HEAD "./backend/${{ matrix.service }}"; then
            echo "skip_build=true" >> $GITHUB_ENV
          else
            echo "skip_build=false" >> $GITHUB_ENV
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        if: env.skip_build == 'false'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image for ${{ matrix.service }}
        if: env.skip_build == 'false'
        run: |
          IMAGE_NAME="${{ matrix.service }}"
          ECR_REPOSITORY="970547372113.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$IMAGE_NAME"
          docker buildx build --platform linux/amd64 -t "$IMAGE_NAME:latest" "./backend/${{ matrix.service }}" --load
          docker tag "$IMAGE_NAME:latest" "$ECR_REPOSITORY:latest"
          docker push "$ECR_REPOSITORY:latest"

      - name: Deploy to Amazon ECS for ${{ matrix.service }}
        if: env.skip_build == 'false'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ matrix.service }}.json
          service: ${{ matrix.service }}
          cluster: chess-tms-cluster
          region: ${{ env.AWS_REGION }}
          force-new-deployment: true